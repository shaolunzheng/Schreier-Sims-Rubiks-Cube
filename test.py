import time
from sympy.combinatorics import Permutation, PermutationGroup
from functions import enumerate_cube

# test runtime of implementation via sympy.combinatorics PermutationGroup

n = 3

if n % 2 == 0:
    N = 6 * n * n
else :
    N = 6 * n * n - 6

# rubiks = enumerate_cube(n, N) # moves that generate the Rubik's cube
# generators = rubiks
#
# start_time = time.time()
#
# G = PermutationGroup(list(generators)) # group generated by the moves
# print(f"Group order: {G.order()}")
#
# elapsed_time = time.time()-start_time
# print(f"Time: {elapsed_time:.2f} seconds")

# P = Permutation(2,6,19,3)
# l = 2
#
# print([P(x) for x in l])

solving_order = [[1,3,5,7],[0,2,4,6],[9,13,35,39],[25,27,29,31],[24,26,28,30]]
print(len(solving_order))